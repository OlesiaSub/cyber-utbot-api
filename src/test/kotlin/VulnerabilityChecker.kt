import org.cyber.utbot.api.GenerateTestsSettings
import org.cyber.utbot.api.TestGenerator
import org.cyber.utbot.api.abstraction.extraChecks.ArgumentsVulnerabilityCheck
import org.cyber.utbot.api.abstraction.extraChecks.ExtraVulnerabilityCheck
import org.cyber.utbot.api.abstraction.extraChecks.FunctionsVulnerabilityCheck
import org.cyber.utbot.api.utils.GeneratedTests
import org.cyber.utbot.api.utils.TargetQualifiedName
import org.cyber.utbot.api.utils.printJson
import org.cyber.utbot.api.utils.toTestUnits
import org.cyber.utbot.api.utils.viewers.UTBotViewers
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.utbot.common.PathUtil.toPath
import org.utbot.framework.TestSelectionStrategyType
import org.utbot.framework.UtSettings
import org.utbot.framework.plugin.api.CodegenLanguage
import java.nio.file.Files


class VulnerabilityChecker {    // one test to change and see what happens. Here specifically for vulnerabilities
    private val postfix = "Test.java"
    private val saveDirPrefix = "src/test/java"
    private val classpath = "build/classes/java/main"
    private val sourceDir = "src/main/java"

    @BeforeEach
    fun init() {
    }
    private fun saveTests(tests: Map<TargetQualifiedName, GeneratedTests>) {
        tests.forEach { nameAndTest ->
            val fullname = nameAndTest.key.replace(".java", "")
            val name = fullname.substringAfterLast(".")
            val path = fullname.substringBeforeLast(".").replace('.', '/')
            val saveDir = "$saveDirPrefix/$path"
            Files.createDirectories(saveDir.toPath());
            Files.write("$saveDir/$name$postfix".toPath(), listOf(nameAndTest.value))
        }
    }

    @Test
    fun check() {
        val classname = "org.example.Example"
        val ignoreBaseChecks = true
        val extraVulnerabilityChecks: List<ExtraVulnerabilityCheck> = listOf(
            ExtraVulnerabilityCheck(
                functionId = "org.example.Example" to "fun4",
                checks = listOf(
                    FunctionsVulnerabilityCheck(
                        functions = listOf(
                            "org.cyber.base.Example" to "fun1",
                            "org.cyber.base.Example" to "fun2"
                        )
                    ),
                    ArgumentsVulnerabilityCheck(
                        signature = listOf("string"),
                        arguments = listOf(
                            listOf("-999"),
                            listOf("999")
                        )
                    )
                ),
                description = "extra vulnerability check"
            )
        )

        val vulnerabilityCheckDirectories = if (ignoreBaseChecks) emptyList() else listOf("src/base/funcs")
        val settings = GenerateTestsSettings(classpath, codegenLanguage = CodegenLanguage.JAVA,
            withUtSettings = { UtSettings.useFuzzing = false; UtSettings.useDebugVisualization = true; UtSettings.testMinimizationStrategyType = TestSelectionStrategyType.DO_NOT_MINIMIZE_STRATEGY },
            utbotViewers = setOf(UTBotViewers.TERMINAL_STATISTIC_VIEWER), onlyVulnerabilities = true,
            // vulnerability checks part
            vulnerabilityCheckDirectories=vulnerabilityCheckDirectories,
            extraVulnerabilityChecks=extraVulnerabilityChecks)

        val generator = TestGenerator(settings)
        val (tests, info) = generator.run(mapOf(classname to "$sourceDir/${classname.replace('.', '/')}.java").toTestUnits())
        println(tests)
//        saveTests(tests)
//        printJson(info[UTBotViewers.TERMINAL_STATISTIC_VIEWER] as String)
    }
}
