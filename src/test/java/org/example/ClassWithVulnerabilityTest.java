package org.example;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import java.io.IOException;

public final class ClassWithVulnerabilityTest {
    ///region Test suites for executable org.example.ClassWithVulnerability.safeCommandRunner
    
    ///region SYMBOLIC EXECUTION: SUCCESSFUL EXECUTIONS for method safeCommandRunner(java.lang.String)
    
    /**
    @utbot.classUnderTest {@link ClassWithVulnerability}
 * @utbot.methodUnderTest {@link org.example.ClassWithVulnerability#safeCommandRunner(java.lang.String)}
 * @utbot.executesCondition {@code (s != "/bin/sh"): True}
 * @utbot.invokes org.example.ClassWithVulnerability#commandRunner(java.lang.String)
 *  */
    @Test
    @DisplayName("safeCommandRunner: s != \"/bin/sh\" : True -> ClassWithVulnerabilityCommandRunner")
    @org.cyber.utils.VulnerabilityInfo("vulnerability description")
    public void testSafeCommandRunner_SNotEqualsBinsh() throws IOException  {
        ClassWithVulnerability classWithVulnerability = new ClassWithVulnerability();
        String string = "/bin/sh";
        
        classWithVulnerability.safeCommandRunner(string);
    }
    ///endregion
    
    ///endregion
}

