package org.testcases.ifs;

// порядок условий внутри влияет на перебор (после первого условия все остальные подбираются при условии x * y == 97). Условия разбираются в обычном порядке, что логично

public class PrimeNumber {
    public boolean fun(int x, int y) {
        if (x * y == 97 && x > 0 && x < 97 && y > 0 && y < 97) {        // 97 - prime
            return true;
        }
        x++;
        return false;
    }
}

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.PrimeNumber,
	i2 := @parameter0: int,
	i0 := @parameter1: int,
	$i1 = i2 * i0,
	if $i1 != 97 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.PrimeNumber), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4464)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(not (Eq (int (Mul (int (BVInt32 p0)) (int (BVInt32 p1)))) (int Int32 97))),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.PrimeNumber,
	i2 := @parameter0: int,
	i0 := @parameter1: int,
	$i1 = i2 * i0,
	if $i1 != 97 goto return 0,
	if i2 <= 0 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.PrimeNumber), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4464)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (Mul (int (BVInt32 p0)) (int (BVInt32 p1)))) (int Int32 97)),
	(Le (int (BVInt32 p0)) (int Int32 0)),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.PrimeNumber,
	i2 := @parameter0: int,
	i0 := @parameter1: int,
	$i1 = i2 * i0,
	if $i1 != 97 goto return 0,
	if i2 <= 0 goto return 0,
	if i2 >= 97 goto return 0,
	if i0 <= 0 goto return 0,
	if i0 >= 97 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.PrimeNumber), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4464)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (Mul (int (BVInt32 p0)) (int (BVInt32 p1)))) (int Int32 97)),
	(Gt (int (BVInt32 p0)) (int Int32 0)),
	(Lt (int (BVInt32 p0)) (int Int32 97)),
	(Ge (int (BVInt32 p1)) (int Int32 97)),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.PrimeNumber,
	i2 := @parameter0: int,
	i0 := @parameter1: int,
	$i1 = i2 * i0,
	if $i1 != 97 goto return 0,
	if i2 <= 0 goto return 0,
	if i2 >= 97 goto return 0,
	if i0 <= 0 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.PrimeNumber), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4464)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (Mul (int (BVInt32 p0)) (int (BVInt32 p1)))) (int Int32 97)),
	(Gt (int (BVInt32 p0)) (int Int32 0)),
	(Lt (int (BVInt32 p0)) (int Int32 97)),
	(Le (int (BVInt32 p1)) (int Int32 0)),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.PrimeNumber,
	i2 := @parameter0: int,
	i0 := @parameter1: int,
	$i1 = i2 * i0,
	if $i1 != 97 goto return 0,
	if i2 <= 0 goto return 0,
	if i2 >= 97 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.PrimeNumber), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4464)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (Mul (int (BVInt32 p0)) (int (BVInt32 p1)))) (int Int32 97)),
	(Ge (int (BVInt32 p0)) (int Int32 97)),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

