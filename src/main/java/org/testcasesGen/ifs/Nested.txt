package org.testcases.ifs;

// последовательно добавляется каждое условие, как и ожидалось.

public class Nested {
    public boolean fun(int x, int y) {
        if (x % 3 == 2 && y % 5 == 4) {
            if (x % 7 == 6 && y % 11 == 10) {
                if (x == y) {
                    return true;
                }
            }
        }
        return false;
    }
}

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.Nested,
	i0 := @parameter0: int,
	i2 := @parameter1: int,
	$i1 = i0 % 3,
	if $i1 != 2 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.Nested), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4475)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(not (Eq (int (Rem (int (BVInt32 p0)) (int Int32 3))) (int Int32 2))),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.Nested,
	i0 := @parameter0: int,
	i2 := @parameter1: int,
	$i1 = i0 % 3,
	if $i1 != 2 goto return 0,
	$i3 = i2 % 5,
	if $i3 != 4 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.Nested), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4475)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (Rem (int (BVInt32 p0)) (int Int32 3))) (int Int32 2)),
	(not (Eq (int (Rem (int (BVInt32 p1)) (int Int32 5))) (int Int32 4))),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.Nested,
	i0 := @parameter0: int,
	i2 := @parameter1: int,
	$i1 = i0 % 3,
	if $i1 != 2 goto return 0,
	$i3 = i2 % 5,
	if $i3 != 4 goto return 0,
	$i4 = i0 % 7,
	if $i4 != 6 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.Nested), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4475)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (Rem (int (BVInt32 p0)) (int Int32 3))) (int Int32 2)),
	(Eq (int (Rem (int (BVInt32 p1)) (int Int32 5))) (int Int32 4)),
	(not (Eq (int (Rem (int (BVInt32 p0)) (int Int32 7))) (int Int32 6))),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.Nested,
	i0 := @parameter0: int,
	i2 := @parameter1: int,
	$i1 = i0 % 3,
	if $i1 != 2 goto return 0,
	$i3 = i2 % 5,
	if $i3 != 4 goto return 0,
	$i4 = i0 % 7,
	if $i4 != 6 goto return 0,
	$i5 = i2 % 11,
	if $i5 != 10 goto return 0,
	if i0 != i2 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.Nested), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4475)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (Rem (int (BVInt32 p0)) (int Int32 3))) (int Int32 2)),
	(Eq (int (Rem (int (BVInt32 p1)) (int Int32 5))) (int Int32 4)),
	(Eq (int (Rem (int (BVInt32 p0)) (int Int32 7))) (int Int32 6)),
	(Eq (int (Rem (int (BVInt32 p1)) (int Int32 11))) (int Int32 10)),
	(Eq (int (BVInt32 p0)) (int (BVInt32 p1))),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.Nested,
	i0 := @parameter0: int,
	i2 := @parameter1: int,
	$i1 = i0 % 3,
	if $i1 != 2 goto return 0,
	$i3 = i2 % 5,
	if $i3 != 4 goto return 0,
	$i4 = i0 % 7,
	if $i4 != 6 goto return 0,
	$i5 = i2 % 11,
	if $i5 != 10 goto return 0,
	if i0 != i2 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.Nested), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4475)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (Rem (int (BVInt32 p0)) (int Int32 3))) (int Int32 2)),
	(Eq (int (Rem (int (BVInt32 p1)) (int Int32 5))) (int Int32 4)),
	(Eq (int (Rem (int (BVInt32 p0)) (int Int32 7))) (int Int32 6)),
	(Eq (int (Rem (int (BVInt32 p1)) (int Int32 11))) (int Int32 10)),
	(not (Eq (int (BVInt32 p0)) (int (BVInt32 p1)))),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.Nested,
	i0 := @parameter0: int,
	i2 := @parameter1: int,
	$i1 = i0 % 3,
	if $i1 != 2 goto return 0,
	$i3 = i2 % 5,
	if $i3 != 4 goto return 0,
	$i4 = i0 % 7,
	if $i4 != 6 goto return 0,
	$i5 = i2 % 11,
	if $i5 != 10 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.Nested), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4475)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (Rem (int (BVInt32 p0)) (int Int32 3))) (int Int32 2)),
	(Eq (int (Rem (int (BVInt32 p1)) (int Int32 5))) (int Int32 4)),
	(Eq (int (Rem (int (BVInt32 p0)) (int Int32 7))) (int Int32 6)),
	(not (Eq (int (Rem (int (BVInt32 p1)) (int Int32 11))) (int Int32 10))),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT
