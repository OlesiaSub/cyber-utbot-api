package org.testcases.ifs;

// разбирает все случаи (5) только если есть switch, иначе только 3

public class TernaryManyVarsSimple {
    public int fun(int x, int y, int z) {
        int a = x == y ? 1 : 2;
        int b = x == z ? 3 : 5;
        int c = z == y ? 7 : 11;

        int result = a * b * c;
        switch (a * b * c) {
            case 21:
                result -= 1;
                break;
            case 55:
                result -= 2;
                break;
            case 66:
                result -= 3;
                break;
            case 70:
                result -= 4;
                break;
            case 110:
                result -= 5;
                break;
            default:
                result = -1;
                break;
        }
        return result;
    }
}

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.TernaryManyVarsSimple,
	i0 := @parameter0: int,
	i1 := @parameter1: int,
	i3 := @parameter2: int,
	if i0 != i1 goto $b9 = 2,
	$b9 = 1,
	goto [?= b2 = $b9],
	b2 = $b9,
	if i0 != i3 goto $b10 = 5,
	$b10 = 5,
	b4 = $b10,
	if i3 != i1 goto $b14 = 11,
	$b14 = 11,
	$b13 = 11,
	$i5 = b2 * b4,
	$i8 = $i5 * $b14,
	$i6 = b2 * b4,
	$i7 = $i6 * $b13,
	lookupswitch($i7) {     case 21: goto i12 = $i8 + -1;     case 55: goto i12 = $i8 + -2;     case 66: goto i12 = $i8 + -3;     case 70: goto i12 = $i8 + -4;     case 110: goto i12 = $i8 + -5;     default: goto i12 = -1; },
	i12 = $i8 + -2,
	goto [?= return i12]
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.TernaryManyVarsSimple), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4484)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (BVInt32 p0)) (int (BVInt32 p1))),
	(not (Eq (int (BVInt32 p0)) (int (BVInt32 p2)))),
	(not (Eq (int (BVInt32 p2)) (int (BVInt32 p1)))),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.TernaryManyVarsSimple,
	i0 := @parameter0: int,
	i1 := @parameter1: int,
	i3 := @parameter2: int,
	if i0 != i1 goto $b9 = 2,
	$b9 = 2,
	b2 = $b9,
	if i0 != i3 goto $b10 = 5,
	$b10 = 5,
	b4 = $b10,
	if i3 != i1 goto $b14 = 11,
	$b14 = 11,
	$b13 = 11,
	$i5 = b2 * b4,
	$i8 = $i5 * $b14,
	$i6 = b2 * b4,
	$i7 = $i6 * $b13,
	lookupswitch($i7) {     case 21: goto i12 = $i8 + -1;     case 55: goto i12 = $i8 + -2;     case 66: goto i12 = $i8 + -3;     case 70: goto i12 = $i8 + -4;     case 110: goto i12 = $i8 + -5;     default: goto i12 = -1; },
	i12 = $i8 + -5,
	goto [?= return i12]
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.TernaryManyVarsSimple), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4484)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(not (Eq (int (BVInt32 p0)) (int (BVInt32 p1)))),
	(not (Eq (int (BVInt32 p0)) (int (BVInt32 p2)))),
	(not (Eq (int (BVInt32 p2)) (int (BVInt32 p1)))),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.TernaryManyVarsSimple,
	i0 := @parameter0: int,
	i1 := @parameter1: int,
	i3 := @parameter2: int,
	if i0 != i1 goto $b9 = 2,
	$b9 = 2,
	b2 = $b9,
	if i0 != i3 goto $b10 = 5,
	$b10 = 5,
	b4 = $b10,
	if i3 != i1 goto $b14 = 11,
	$b14 = 7,
	$b13 = 7,
	goto [?= $i5 = b2 * b4],
	$i5 = b2 * b4,
	$i8 = $i5 * $b14,
	$i6 = b2 * b4,
	$i7 = $i6 * $b13,
	lookupswitch($i7) {     case 21: goto i12 = $i8 + -1;     case 55: goto i12 = $i8 + -2;     case 66: goto i12 = $i8 + -3;     case 70: goto i12 = $i8 + -4;     case 110: goto i12 = $i8 + -5;     default: goto i12 = -1; },
	i12 = $i8 + -4,
	goto [?= return i12]
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.TernaryManyVarsSimple), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4484)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(not (Eq (int (BVInt32 p0)) (int (BVInt32 p1)))),
	(not (Eq (int (BVInt32 p0)) (int (BVInt32 p2)))),
	(Eq (int (BVInt32 p2)) (int (BVInt32 p1))),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.TernaryManyVarsSimple,
	i0 := @parameter0: int,
	i1 := @parameter1: int,
	i3 := @parameter2: int,
	if i0 != i1 goto $b9 = 2,
	$b9 = 1,
	goto [?= b2 = $b9],
	b2 = $b9,
	if i0 != i3 goto $b10 = 5,
	$b10 = 3,
	goto [?= b4 = $b10],
	b4 = $b10,
	if i3 != i1 goto $b14 = 11,
	$b14 = 7,
	$b13 = 7,
	goto [?= $i5 = b2 * b4],
	$i5 = b2 * b4,
	$i8 = $i5 * $b14,
	$i6 = b2 * b4,
	$i7 = $i6 * $b13,
	lookupswitch($i7) {     case 21: goto i12 = $i8 + -1;     case 55: goto i12 = $i8 + -2;     case 66: goto i12 = $i8 + -3;     case 70: goto i12 = $i8 + -4;     case 110: goto i12 = $i8 + -5;     default: goto i12 = -1; },
	i12 = $i8 + -1,
	goto [?= return i12]
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.TernaryManyVarsSimple), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4484)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (BVInt32 p0)) (int (BVInt32 p1))),
	(Eq (int (BVInt32 p0)) (int (BVInt32 p2))),
	(Eq (int (BVInt32 p2)) (int (BVInt32 p1))),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.ifs.TernaryManyVarsSimple,
	i0 := @parameter0: int,
	i1 := @parameter1: int,
	i3 := @parameter2: int,
	if i0 != i1 goto $b9 = 2,
	$b9 = 2,
	b2 = $b9,
	if i0 != i3 goto $b10 = 5,
	$b10 = 3,
	goto [?= b4 = $b10],
	b4 = $b10,
	if i3 != i1 goto $b14 = 11,
	$b14 = 11,
	$b13 = 11,
	$i5 = b2 * b4,
	$i8 = $i5 * $b14,
	$i6 = b2 * b4,
	$i7 = $i6 * $b13,
	lookupswitch($i7) {     case 21: goto i12 = $i8 + -1;     case 55: goto i12 = $i8 + -2;     case 66: goto i12 = $i8 + -3;     case 70: goto i12 = $i8 + -4;     case 110: goto i12 = $i8 + -5;     default: goto i12 = -1; },
	i12 = $i8 + -3,
	goto [?= return i12]
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.ifs.TernaryManyVarsSimple), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4484)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(not (Eq (int (BVInt32 p0)) (int (BVInt32 p1)))),
	(Eq (int (BVInt32 p0)) (int (BVInt32 p2))),
	(not (Eq (int (BVInt32 p2)) (int (BVInt32 p1)))),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT
