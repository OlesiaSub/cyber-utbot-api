package org.testcases.math;

// корректно заверщается, куча страшных вещей потому что Math

public class OnePow {
    public boolean fun(int x) {
        if (x > Math.pow(2, 2)) {
            return true;
        }
        x++;
        return false;
    }
}

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.math.OnePow,
	i1 := @parameter0: int,
	$d0 = (double) i1,
	$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, 2.0),
	d0 := @parameter0: double,
	d1 := @parameter1: double,
	$d2 = staticinvoke <java.lang.StrictMath: double pow(double,double)>(d0, d1),
	d0 := @parameter0: double,
	d1 := @parameter1: double,
	$d2 = staticinvoke <java.lang.FdLibm$Pow: double compute(double,double)>(d0, d1),
	d1 := @parameter0: double,
	d0 := @parameter1: double,
	$b0 = d0 cmpl 0.0,
	if $b0 != 0 goto $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1),
	$z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1),
	d0 := @parameter0: double,
	$b0 = d0 cmpl d0,
	if $b0 == 0 goto $z0 = 0,
	$z0 = 0,
	return $z0,
	$z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1),
	if $z0 != 0 goto $d2 = d1 + d0,
	$z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0),
	d0 := @parameter0: double,
	$b0 = d0 cmpl d0,
	if $b0 == 0 goto $z0 = 0,
	$z0 = 0,
	return $z0,
	$z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0),
	if $z1 == 0 goto $d3 = staticinvoke <java.lang.Math: double abs(double)>(d0),
	$d3 = staticinvoke <java.lang.Math: double abs(double)>(d0),
	d0 := @parameter0: double,
	$b0 = d0 cmpg 0.0,
	if $b0 > 0 goto $d1 = d0,
	$d1 = d0,
	return $d1,
	$d3 = staticinvoke <java.lang.Math: double abs(double)>(d0),
	$d4 = staticinvoke <java.lang.Math: double abs(double)>(d1),
	d0 := @parameter0: double,
	$b0 = d0 cmpg 0.0,
	if $b0 > 0 goto $d1 = d0,
	$d1 = d0,
	return $d1,
	$d4 = staticinvoke <java.lang.Math: double abs(double)>(d1),
	d33 = $d4,
	$b1 = d0 cmpl 2.0,
	if $b1 != 0 goto $b2 = d0 cmpl 0.5,
	$d32 = d1 * d1,
	return $d32,
	$d2 = staticinvoke <java.lang.FdLibm$Pow: double compute(double,double)>(d0, d1),
	return $d2,
	$d2 = staticinvoke <java.lang.StrictMath: double pow(double,double)>(d0, d1),
	return $d2,
	$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, 2.0),
	$b0 = $d0 cmpl $d1,
	if $b0 <= 0 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.math.OnePow), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(is addr: Int32 1 java.lang.Math),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 1)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 1)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 1)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 1)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 1) false),
	(is addr: Int32 2 java.lang.StrictMath),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 2)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 2)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 2)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 2)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 2) false),
	(is addr: Int32 3 java.lang.FdLibm$Pow),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 3)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 3)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 3)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 3)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 3) false),
	(not (Eq (int (Cmpl (double Fp64 2.0) (double Fp64 0.0))) (int Int32 0))),
	(is addr: Int32 4 java.lang.Double),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 4)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 4)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 4)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 4)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 4) false),
	(Eq (int (Cmpl (double Fp64 2.0) (double Fp64 2.0))) (int Int32 0)),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32)),
	(is addr: Int32 5 java.lang.Double),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 5)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 5)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 5)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 5)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 5) false),
	(is addr: Int32 6 java.lang.Math),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 6)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 6)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 6)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 6)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 6) false),
	(Gt (int (Cmpg (double Fp64 2.0) (double Fp64 0.0))) (int Int32 0)),
	(is addr: Int32 7 java.lang.Math),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 7)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 7)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 7)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 7)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 7) false),
	(Le (int (Cmpl (double UtCastExpression(variable=(int (BVInt32 p0)), type=double)) (double (Mul (double Fp64 2.0) (double Fp64 2.0))))) (int Int32 0))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.math.OnePow,
	i1 := @parameter0: int,
	$d0 = (double) i1,
	$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, 2.0),
	d0 := @parameter0: double,
	d1 := @parameter1: double,
	$d2 = staticinvoke <java.lang.StrictMath: double pow(double,double)>(d0, d1),
	d0 := @parameter0: double,
	d1 := @parameter1: double,
	$d2 = staticinvoke <java.lang.FdLibm$Pow: double compute(double,double)>(d0, d1),
	d1 := @parameter0: double,
	d0 := @parameter1: double,
	$b0 = d0 cmpl 0.0,
	if $b0 != 0 goto $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1),
	$z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1),
	d0 := @parameter0: double,
	$b0 = d0 cmpl d0,
	if $b0 == 0 goto $z0 = 0,
	$z0 = 0,
	return $z0,
	$z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1),
	if $z0 != 0 goto $d2 = d1 + d0,
	$z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0),
	d0 := @parameter0: double,
	$b0 = d0 cmpl d0,
	if $b0 == 0 goto $z0 = 0,
	$z0 = 0,
	return $z0,
	$z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0),
	if $z1 == 0 goto $d3 = staticinvoke <java.lang.Math: double abs(double)>(d0),
	$d3 = staticinvoke <java.lang.Math: double abs(double)>(d0),
	d0 := @parameter0: double,
	$b0 = d0 cmpg 0.0,
	if $b0 > 0 goto $d1 = d0,
	$d1 = d0,
	return $d1,
	$d3 = staticinvoke <java.lang.Math: double abs(double)>(d0),
	$d4 = staticinvoke <java.lang.Math: double abs(double)>(d1),
	d0 := @parameter0: double,
	$b0 = d0 cmpg 0.0,
	if $b0 > 0 goto $d1 = d0,
	$d1 = d0,
	return $d1,
	$d4 = staticinvoke <java.lang.Math: double abs(double)>(d1),
	d33 = $d4,
	$b1 = d0 cmpl 2.0,
	if $b1 != 0 goto $b2 = d0 cmpl 0.5,
	$d32 = d1 * d1,
	return $d32,
	$d2 = staticinvoke <java.lang.FdLibm$Pow: double compute(double,double)>(d0, d1),
	return $d2,
	$d2 = staticinvoke <java.lang.StrictMath: double pow(double,double)>(d0, d1),
	return $d2,
	$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, 2.0),
	$b0 = $d0 cmpl $d1,
	if $b0 <= 0 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.math.OnePow), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(is addr: Int32 1 java.lang.Math),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 1)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 1)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 1)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 1)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 1) false),
	(is addr: Int32 2 java.lang.StrictMath),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 2)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 2)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 2)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 2)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 2) false),
	(is addr: Int32 3 java.lang.FdLibm$Pow),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 3)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 3)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 3)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 3)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 3) false),
	(not (Eq (int (Cmpl (double Fp64 2.0) (double Fp64 0.0))) (int Int32 0))),
	(is addr: Int32 4 java.lang.Double),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 4)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 4)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 4)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 4)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 4) false),
	(Eq (int (Cmpl (double Fp64 2.0) (double Fp64 2.0))) (int Int32 0)),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32)),
	(is addr: Int32 5 java.lang.Double),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 5)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 5)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 5)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 5)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 5) false),
	(is addr: Int32 6 java.lang.Math),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 6)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 6)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 6)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 6)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 6) false),
	(Gt (int (Cmpg (double Fp64 2.0) (double Fp64 0.0))) (int Int32 0)),
	(is addr: Int32 7 java.lang.Math),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 7)) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: Int32 7)) (int Int32 4462)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 7)) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: Int32 7)) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: Int32 7) false),
	(Gt (int (Cmpl (double UtCastExpression(variable=(int (BVInt32 p0)), type=double)) (double (Mul (double Fp64 2.0) (double Fp64 2.0))))) (int Int32 0))
assumption:
lastStatus: SAT
