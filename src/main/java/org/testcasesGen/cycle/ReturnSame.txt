package org.testcases.cycle;

// по условиям результат аналогичный SimpleTest. В ограничения добавляется только одно условие: "x = .."

public class ReturnSame {
    public int fun(int x) {
        for (int i = 0; i < x; i++) {
            if (i > 99) {
                return x;
            }
        }
        return x;
    }
}

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.cycle.ReturnSame,
	i0 := @parameter0: int,
	i1 = 0,
	if i1 >= i0 goto return i0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.cycle.ReturnSame), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4475)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Le (int (BVInt32 p0)) (int Int32 0)),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.cycle.ReturnSame,
	i0 := @parameter0: int,
	i1 = 0,
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.cycle.ReturnSame), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4475)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (BVInt32 p0)) (int Int32 1)),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.cycle.ReturnSame,
	i0 := @parameter0: int,
	i1 = 0,
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= i0 goto return i0,
	if i1 <= 99 goto i1 = i1 + 1
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.cycle.ReturnSame), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4475)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Gt (int (BVInt32 p0)) (int Int32 100)),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT
