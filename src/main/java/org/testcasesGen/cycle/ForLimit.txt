package org.testcases.cycle;

// Не смог пройти по if в 9 строке (в итоге 3 условия: не заходит в цикл, if не верен после 1 операции, if не верен после какой-то операции). При limit = 40 проходит.

public class ForLimit {
    public boolean fun(int x) {
        int limit = 45;
        for (int i = 0; i < limit; i++) {
            if (i == x && i == limit-1) {
                return true;
            }
        }
        return false;
    }
}

Не сохраняет состояния где обычно. Для 40 следующее (из странного слишком далеко прошёл по инструкциям для 3 в первом случае):

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.cycle.ForLimit,
	i0 := @parameter0: int,
	i1 = 0,
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	if i1 != 39 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.cycle.ForLimit), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4475)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (BVInt32 p0)) (int Int32 3)),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT

----------------------------------------------------------------------------------------------------
path: r0 := @this: org.testcases.cycle.ForLimit,
	i0 := @parameter0: int,
	i1 = 0,
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	i1 = i1 + 1,
	goto [?= (branch)],
	if i1 >= 40 goto return 0,
	if i1 != i0 goto i1 = i1 + 1,
	if i1 != 39 goto i1 = i1 + 1
assertions: (Le (int addr: (BVInt32 p_this)) (int addr: Int32 0)),
	(or (is addr: (BVInt32 p_this) org.testcases.cycle.ForLimit), (eq addr: (BVInt32 p_this) addr: Int32 0)),
	(Ge (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToTypeId : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4475)),
	(Ge (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 0)),
	(Le (int (select (array addrToNumDimensions : Int32 -> Int32) addr: (BVInt32 p_this))) (int Int32 4)),
	(eq (select (array isMock : Int32 -> Bool) addr: (BVInt32 p_this)) false),
	(not (Eq (int addr: (BVInt32 p_this)) (int addr: Int32 0))),
	(Eq (int (BVInt32 p0)) (int Int32 39)),
	(mkTermArray (array arraysLength : Int32 -> Int32)),
	(mkTermArray (array addrToNumDimensions : Int32 -> Int32)),
	(mkTermArray (array addrToTypeId : Int32 -> Int32))
assumption:
lastStatus: SAT
