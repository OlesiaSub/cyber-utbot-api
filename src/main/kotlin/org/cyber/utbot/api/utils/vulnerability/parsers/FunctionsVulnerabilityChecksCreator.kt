package org.cyber.utbot.api.utils.vulnerability.parsers

import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import org.cyber.utbot.api.abstraction.JsonVulnerabilityCheck
import org.cyber.utbot.api.abstraction.VulnerabilityCheck
import org.cyber.utbot.api.abstraction.VulnerabilityCheckInfo
import org.cyber.utbot.api.utils.FunctionId
import java.io.File

object FunctionsVulnerabilityChecksCreator: AbstractVulnerabilityChecksCreator() {
    private val gson = Gson()
    private val type = object : TypeToken<List<JsonVulnerabilityCheck>>() {}.type

    private fun check(functionsList: List<JsonVulnerabilityCheck>): List<FunctionId> =
        functionsList.map { it.fullyQualified to it.function }

    override fun parseVulnerabilityCheckInfo(vulnerabilityCheckInfo: VulnerabilityCheckInfo): VulnerabilityCheck {
        val functionIds = check(vulnerabilityCheckInfo.paths.map {
            gson.fromJson<List<JsonVulnerabilityCheck>>(File(it).read(), type)
        }.flatten())
        return VulnerabilityCheck(functionIds = functionIds, description = vulnerabilityCheckInfo.description)
    }
}
