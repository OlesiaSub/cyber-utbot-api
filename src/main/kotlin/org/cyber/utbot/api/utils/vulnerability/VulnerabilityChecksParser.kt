package org.cyber.utbot.api.utils.vulnerability

import java.io.File
import com.google.gson.Gson
import org.cyber.utbot.api.abstraction.JsonVulnerability
import org.cyber.utbot.api.abstraction.VulnerabilityCheckInfo
import org.cyber.utbot.api.exceptions.CyberException
import org.cyber.utbot.api.utils.FunctionId

class VulnerabilityChecksParser {
    private val gson = Gson()

    private fun File.read() = bufferedReader().use { it.readText() }

    fun parseVulnerabilityChecksDirectory(directory: String): MutableMap<Pair<String?, String>, MutableList<VulnerabilityCheckInfo>> {
        val vulnerabilityCheckInfos = mutableMapOf<FunctionId, MutableList<VulnerabilityCheckInfo>>()
        File(directory).walk().forEach { file ->
            if (file.isDirectory) return@forEach
            val vulnerability = gson.fromJson(file.read(), JsonVulnerability::class.java)
            assert(listOf(vulnerability.functions == null, vulnerability.arguments == null, vulnerability.constraints == null).count { true } == 1) {
                "Json vulnerability exception: should be only one way to set a condition for a function"
            }
            vulnerability.apply {
                vulnerabilityCheckInfos.getOrPut(fullyQualified to function) { mutableListOf() }.add(
                    when {
                        functions != null -> VulnerabilityCheckInfo(description, functions, VulnerabilityCheckCreationMode.FUNCTIONS)
                        arguments != null -> VulnerabilityCheckInfo(description, arguments, VulnerabilityCheckCreationMode.ARGUMENTS)
                        constraints != null -> VulnerabilityCheckInfo(description, constraints, VulnerabilityCheckCreationMode.CONSTRAINTS)
                        else -> throw CyberException("Json vulnerability exception: functions, arguments and constraints not set")
                    }
                )
            }
        }
        return vulnerabilityCheckInfos
    }

    fun parseVulnerabilityCheckInfo(vulnerabilityCheckInfo: VulnerabilityCheckInfo) =
        vulnerabilityCheckInfo.mode.creator.parseVulnerabilityCheckInfo(vulnerabilityCheckInfo)
}
