package org.cyber.utbot.api.utils.vulnerability.parsers

import com.google.gson.Gson
import org.cyber.utbot.api.abstraction.JsonVulnerabilityArgumentsCheck
import org.cyber.utbot.api.abstraction.VulnerabilityCheck
import org.cyber.utbot.api.abstraction.VulnerabilityCheckInfo
import org.cyber.utbot.api.utils.FunctionId
import org.cyber.utbot.api.utils.GENERATE_METHOD_ARGUMENTS_PREFIX
import org.cyber.utbot.api.utils.VULNERABILITY_CHECKS_FUNCTIONS_CLASS_NAME
import org.cyber.utbot.api.utils.additions.vulnerability.createConstraintsFunction
import java.io.File

object ArgumentsVulnerabilityChecksCreator: AbstractVulnerabilityChecksCreator() {
    private val gson = Gson()
    private val type = JsonVulnerabilityArgumentsCheck::class.java
    private var argumentsGenerateNumber = 0

    private fun check(argumentsChecks: List<JsonVulnerabilityArgumentsCheck>): List<FunctionId> =
        argumentsChecks.map { check ->
            VULNERABILITY_CHECKS_FUNCTIONS_CLASS_NAME to createConstraintsFunction("${GENERATE_METHOD_ARGUMENTS_PREFIX}${argumentsGenerateNumber++}", check).name
        }
//        throw CyberException("ArgumentsVulnerabilityChecksCreator not yet implemented")

    override fun parseVulnerabilityCheckInfo(vulnerabilityCheckInfo: VulnerabilityCheckInfo): VulnerabilityCheck {
        val functionIds = check(vulnerabilityCheckInfo.paths.map {
            gson.fromJson(File(it).read(), type)
        })
        return VulnerabilityCheck(functionIds = functionIds, description = vulnerabilityCheckInfo.description)
    }
}
