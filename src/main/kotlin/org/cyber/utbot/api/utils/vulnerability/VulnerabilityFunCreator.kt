package org.cyber.utbot.api.utils.vulnerability

import org.cyber.utbot.api.exceptions.CyberException
import org.utbot.engine.*
import org.utbot.engine.pc.UtBoolExpression
import org.utbot.engine.pc.mkAnd
import org.utbot.engine.pc.mkEq

class VulnerabilityFunCreator {     // TODO(improve it)
    private fun eqArguments(first: SymbolicValue, second: Any): UtBoolExpression {
        return when(second) {
            is String -> mkEq((first.concrete!!.value as StringWrapper).primitiveToLiteral(), second.primitiveToLiteral()) // (first as ObjectValue).   // FIXME
            else -> mkEq(first as PrimitiveValue, second.primitiveToSymbolic())
        }
    }

    fun funByArguments(argumentsList: List<List<Any>>): (List<SymbolicValue>) -> Set<UtBoolExpression> = { symbolicValues ->
        val res = argumentsList.mapNotNull { arguments ->
            if (arguments.size != symbolicValues.size) null else
                mkAnd(symbolicValues.zip(arguments).map { eqArguments(it.first, it.second) })
        }.toSet()
        println("funByArguments $res")
        res
    }

    fun funByConstraints(argumentsList: List<Any>): (List<SymbolicValue>) -> Set<UtBoolExpression> =
        throw CyberException("funByConstraints not yet implemented")
}
