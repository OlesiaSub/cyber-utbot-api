package org.cyber.utbot.api.utils.additions.fuzzing

import VulnerabilityArgumentsCheckWithDescription
import org.cyber.utbot.api.CYBER_MOCK_ALWAYS_DEFAULT
import org.cyber.utbot.api.GenerateTestsSettings
import org.cyber.utbot.api.MOCK_ALWAYS_DEFAULT
import org.cyber.utbot.api.TestGenerator
import org.cyber.utbot.api.utils.UTBOT_DIR
import org.cyber.utbot.api.utils.additions.constraints.Constraint
import org.cyber.utbot.api.utils.toTestUnits
import org.cyber.utbot.api.utils.viewers.UTBotViewers
import org.utbot.common.PathUtil.toPath
import org.utbot.engine.SymbolicValue
import org.utbot.framework.TestSelectionStrategyType
import org.utbot.framework.UtSettings
import org.utbot.framework.plugin.api.CodegenLanguage
import org.utbot.framework.plugin.api.MethodId
import org.utbot.framework.plugin.api.MockStrategyApi
import org.utbot.framework.plugin.api.util.method
import org.utbot.fuzzing.Configuration
import java.nio.file.Files

class TaintVulnerabilityChecksFuzzer : VulnerabilityChecksFuzzer {
    override fun generate(
        methodId: MethodId,
        parametersInfo: ParametersInfo?, // вероятно не нужна
        constraints: Iterable<Constraint>,
        description: String,
        taintedArgs: MutableSet<Pair<SymbolicValue, Int>>
    ): VulnerabilityArgumentsCheckWithDescription? {
        val settings = GenerateTestsSettings(
            "C:/Users/lesya/uni2/UTBotJava/cyber-utbot-api/build/classes/java/main",
            codegenLanguage = CodegenLanguage.JAVA,
            mockAlways = MOCK_ALWAYS_DEFAULT + CYBER_MOCK_ALWAYS_DEFAULT,
            mockStrategy = MockStrategyApi.NO_MOCKS,
            withUtSettings = {
                UtSettings.useFuzzing = true; UtSettings.useDebugVisualization =
                true; UtSettings.testMinimizationStrategyType = TestSelectionStrategyType.DO_NOT_MINIMIZE_STRATEGY;
            },
            utbotViewers = setOf(UTBotViewers.TERMINAL_STATISTIC_VIEWER),
            vulnerabilityCheckDirectories = listOf("$UTBOT_DIR/cyber-utbot-exploit-base/src/base"),
            vulnerabilityType = description
        )
        Configuration.vulnerabilityType = description
        taintedArgs?.let { Configuration.taintedArgs = taintedArgs.map { it.second } }
        val generator = TestGenerator(settings)
        val (tests, info) = generator.run(
            mapOf(methodId.classId.name to methodId.classId.prettifiedName).toTestUnits(),
            genMethods = listOf(methodId.method.name)
        ) // todo check classname
        tests.forEach { nameAndTest ->
            Files.write(
                "src/test/java/org/example/${nameAndTest.key.takeLastWhile { it != '.' }}TestFuzz.java".toPath(),
                listOf(nameAndTest.value)
            )
        }
        return null
    }
}