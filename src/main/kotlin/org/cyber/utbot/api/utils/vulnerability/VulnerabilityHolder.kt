package org.cyber.utbot.api.utils.vulnerability

import org.cyber.utbot.api.abstraction.VulnerabilityFun
import org.cyber.utbot.api.abstraction.VulnerabilityInfo

class VulnerabilityHolder(directories: List<String> = emptyList()) {
    private val vulnerabilityParser = VulnerabilityParser()

    private val vulnerabilityConstraintsInfo: MutableMap<Pair<String?, String>, MutableList<VulnerabilityInfo>> = mutableMapOf()

    private val vulnerabilityConstraints: MutableMap<Pair<String?, String>, MutableList<VulnerabilityFun>> = mutableMapOf()

    init {
        directories.forEach {
            vulnerabilityParser.parseVulnerabilityDirectory(it).forEach { (function, vulnerabilityInfo) ->
                vulnerabilityConstraintsInfo.getOrPut(function) { mutableListOf() }.addAll(vulnerabilityInfo)
            }
        }
    }

    private fun updateVulnerabilityConstraints(fullyQualifiedName: String?, functionName: String): List<VulnerabilityFun>? =
        vulnerabilityConstraintsInfo[fullyQualifiedName to functionName]?.map { vulnerabilityInfo ->
            vulnerabilityParser.parseVulnerability(vulnerabilityInfo)
        }?.also { vulnerabilityConstraints[fullyQualifiedName to functionName] = it.toMutableList() }

    fun stateUpdates(fullyQualifiedName: String?, functionName: String): List<VulnerabilityFun>? =
        vulnerabilityConstraints[fullyQualifiedName to functionName] ?: updateVulnerabilityConstraints(fullyQualifiedName, functionName)
}
