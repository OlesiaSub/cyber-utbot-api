package org.cyber.utbot.api.utils.vulnerability

import org.cyber.utbot.api.abstraction.VulnerabilityCheck
import org.cyber.utbot.api.abstraction.VulnerabilityCheckInfo
import org.cyber.utbot.api.abstraction.extraChecks.ExtraVulnerabilityCheck
import org.cyber.utbot.api.utils.FunctionId

private operator fun<T> List<T>?.plus(list: List<T>?): List<T>? {
    return this?.let { x1 -> list?.let { x2 -> x1 + x2 } ?: x1 } ?: list
}

class VulnerabilityChecksHolder(bases: List<String>, checksAnalysisSuffix: String, checksSuffix: String) {
    private val vulnerabilityChecksParser = VulnerabilityChecksParser(checksAnalysisSuffix, checksSuffix)

    private val vulnerabilityChecksInfo: MutableMap<FunctionId, MutableList<VulnerabilityCheckInfo>> = mutableMapOf()

    private val vulnerabilityChecks: MutableMap<FunctionId, MutableList<VulnerabilityCheck>> = mutableMapOf()

    private val extraVulnerabilityChecksInfo: MutableMap<FunctionId, MutableList<ExtraVulnerabilityCheck>> = mutableMapOf()

    private val extraVulnerabilityChecks: MutableMap<FunctionId, MutableList<VulnerabilityCheck>> = mutableMapOf()

    init {
        bases.forEach {
            vulnerabilityChecksParser.parseVulnerabilityChecksDirectory(it).forEach { (function, vulnerabilityCheckInfo) ->
                vulnerabilityChecksInfo.getOrPut(function) { mutableListOf() }.addAll(vulnerabilityCheckInfo)
            }
        }
    }

    fun register(extraChecks: List<ExtraVulnerabilityCheck>) {
        extraChecks.forEach {
            extraVulnerabilityChecksInfo.getOrPut(it.functionId) { mutableListOf() }.add(it)
        }
    }

    private fun updateExtraVulnerabilityChecks(functionId: FunctionId): List<VulnerabilityCheck>? =
        extraVulnerabilityChecksInfo[functionId]?.map {
            vulnerabilityChecksParser.parseAnyVulnerabilityCheck(it.checks, it.description)
        }?.also { extraVulnerabilityChecks[functionId] = it.toMutableList() }

    private fun updateVulnerabilityChecks(functionId: FunctionId): List<VulnerabilityCheck>? =
        vulnerabilityChecksInfo[functionId]?.map { vulnerabilityCheckInfo ->
            vulnerabilityChecksParser.parseVulnerabilityCheckInfo(vulnerabilityCheckInfo)
        }?.also { vulnerabilityChecks[functionId] = it.toMutableList() }

    fun checks(functionId: FunctionId): List<VulnerabilityCheck>? =
        (extraVulnerabilityChecks[functionId] ?: updateExtraVulnerabilityChecks(functionId)) +
                (vulnerabilityChecks[functionId] ?: updateVulnerabilityChecks(functionId))
}
