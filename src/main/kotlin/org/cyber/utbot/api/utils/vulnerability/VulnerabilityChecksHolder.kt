package org.cyber.utbot.api.utils.vulnerability

import org.cyber.utbot.api.abstraction.VulnerabilityCheck
import org.cyber.utbot.api.abstraction.VulnerabilityCheckInfo
import org.cyber.utbot.api.utils.FunctionId

class VulnerabilityChecksHolder(directories: List<String> = emptyList()) {
    private val vulnerabilityChecksParser = VulnerabilityChecksParser()

    private val vulnerabilityChecksInfo: MutableMap<FunctionId, MutableList<VulnerabilityCheckInfo>> = mutableMapOf()

    private val vulnerabilityChecks: MutableMap<FunctionId, MutableList<VulnerabilityCheck>> = mutableMapOf()

    init {
        directories.forEach {
            vulnerabilityChecksParser.parseVulnerabilityChecksDirectory(it).forEach { (function, vulnerabilityCheckInfo) ->
                vulnerabilityChecksInfo.getOrPut(function) { mutableListOf() }.addAll(vulnerabilityCheckInfo)
            }
        }
    }

    private fun updateVulnerabilityChecks(functionId: FunctionId): List<VulnerabilityCheck>? =
        vulnerabilityChecksInfo[functionId]?.map { vulnerabilityCheckInfo ->
            vulnerabilityChecksParser.parseVulnerabilityCheckInfo(vulnerabilityCheckInfo)
        }?.also { vulnerabilityChecks[functionId] = it.toMutableList() }

    fun checks(functionId: FunctionId): List<VulnerabilityCheck>? =
        vulnerabilityChecks[functionId] ?: updateVulnerabilityChecks(functionId)
}
