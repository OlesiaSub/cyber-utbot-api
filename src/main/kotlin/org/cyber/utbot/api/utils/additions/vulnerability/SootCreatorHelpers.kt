package org.cyber.utbot.api.utils.additions.vulnerability

import org.cyber.utbot.api.abstraction.utils.ArgType
import org.cyber.utbot.api.utils.ASSERT_CLASS_NAME
import org.cyber.utbot.api.utils.ASSERT_FUNCTION_NAME
import org.cyber.utbot.api.utils.VULNERABILITY_CHECKS_CLASS_NAME
import org.cyber.utbot.api.utils.VULNERABILITY_CHECKS_FUNCTIONS_CLASS_NAME
import org.utbot.engine.intConstant
import org.utbot.engine.types.OBJECT_TYPE
import org.utbot.engine.types.STRING_TYPE
import soot.*
import soot.jimple.*

internal val int0 = intConstant(0)
internal val int1 = intConstant(1)

private val sootClassAssert = Scene.v().getSootClass(ASSERT_CLASS_NAME)
internal val assertSootMethod = sootClassAssert.getMethod(ASSERT_FUNCTION_NAME, listOf(STRING_TYPE))
internal val sootClassVulnerabilityChecks = Scene.v().getSootClass(VULNERABILITY_CHECKS_CLASS_NAME)
internal val sootClassVulnerabilityChecksFunctions = Scene.v().getSootClass(VULNERABILITY_CHECKS_FUNCTIONS_CLASS_NAME)
internal val staticEqualsMethod = Scene.v().getSootClass("java.util.Objects").getMethod("equals", listOf(OBJECT_TYPE, OBJECT_TYPE), BooleanType.v())

fun SootMethod.toStaticInvokeExpr(vararg values: Value): StaticInvokeExpr = Jimple.v().newStaticInvokeExpr(this.makeRef(), *values)

internal fun eqExpr(left: Value, right: Value): EqExpr = Jimple.v().newEqExpr(left, right)

internal fun neExpr(left: Value, right: Value): NeExpr = Jimple.v().newNeExpr(left, right)

internal fun equals(left: Value, right: Value, type: ArgType) = if (type == ArgType.STRING) staticEqualsMethod.toStaticInvokeExpr(left, right) else eqExpr(left, right)

fun SootMethod.toInterfaceInvokeExpr(local: Local, vararg values: Value): InterfaceInvokeExpr = Jimple.v().newInterfaceInvokeExpr(local, this.makeRef(), *values)
