package org.cyber.utbot.api.utils.additions.vulnerability

import org.cyber.utbot.api.utils.ASSERT_CLASS_NAME
import org.cyber.utbot.api.utils.ASSERT_FUNCTION_NAME
import org.cyber.utbot.api.utils.VULNERABILITY_CHECKS_CLASS_NAME
import org.cyber.utbot.api.utils.VULNERABILITY_CHECKS_FUNCTIONS_CLASS_NAME
import org.utbot.engine.types.STRING_TYPE
import soot.*
import soot.jimple.*

private val sootClassAssert = Scene.v().getSootClass(ASSERT_CLASS_NAME)
internal val assertSootMethod = sootClassAssert.getMethod(ASSERT_FUNCTION_NAME, listOf(STRING_TYPE))
internal val sootClassVulnerabilityChecks = Scene.v().getSootClass(VULNERABILITY_CHECKS_CLASS_NAME)
internal val sootClassVulnerabilityChecksFunctions = Scene.v().getSootClass(VULNERABILITY_CHECKS_FUNCTIONS_CLASS_NAME)


fun SootMethod.toStaticInvokeExpr(vararg values: Value): StaticInvokeExpr = Jimple.v().newStaticInvokeExpr(this.makeRef(), *values)

internal fun eqExpr(left: Value, right: Value): EqExpr = Jimple.v().newEqExpr(left, right)

internal fun neExpr(left: Value, right: Value): NeExpr = Jimple.v().newNeExpr(left, right)

internal fun andExpr(values: List<Value>): Value = values.reduce { x, y -> Jimple.v().newAndExpr(x, y) }

internal fun orExpr(values: List<Value>): Value = values.reduce { x, y -> Jimple.v().newOrExpr(x, y) }
